package com.test.aug27.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import com.test.aug27.exceptions.InvalidNameException;
import com.test.aug27.exceptions.PlayerValidator;
import com.test.aug27.exceptions.ValidNameException;
import com.test.aug27.pojo.Player;

class NameComparator implements Comparator<Player> {

	@Override
	public int compare(Player o1, Player o2) {
		return o1.getName().compareToIgnoreCase(o2.getName());
	}
	
}

public class TeamSelection {
	
//	int id;
//	String name;
//	int matchesPlayed;
//	int totRuns;
//	int highestScore;
//	int wktsTaken;
//	int outOnZero;
//	String type;
//	double avgScore;
	
	public static List<Player> playerList = new ArrayList<>();
	public static Scanner sc = new Scanner(System.in);
	public static PlayerValidator pv = new PlayerValidator();
	public static Random rand = new Random();
	
	static int count = 20;
	static int bowlerCount = 0;
	static int wktKeeper = 0;
	
	public static boolean validateName(String name) {
		Iterator<Player> itr = playerList.iterator();
		boolean ret = true;

		while(itr.hasNext()) {
			Player pl = itr.next();
			try {
//				uv.checkUserName(r.getUserName(), rx.getUserName());
				pv.checkName(name, pl.getName());
			} catch (InvalidNameException e) {
				System.out.println("Player already exists!!");
				ret = false;
				break;
			} catch (ValidNameException e) {
				
			}
		}
		return ret;
	}
	
	public void getPlayerList() {
		System.out.println("\nEnter details of 20 players: ");
		int  i = 0;
		while(i < 5) {
			int id = i+1;
			
			String name;
			while(true) {
				System.out.println("\nEnter name: ");
				name = sc.next();
				if(validateName(name))
					break;
			}
			
			System.out.println("Enter no. of matches played: ");
			int matchesPlayed = sc.nextInt();
			
			System.out.println("Enter total runs scored: ");
			int totRuns = sc.nextInt();
			
			System.out.println("Enter highest score: ");
			int highestScore = sc.nextInt();
			
			System.out.println("Enter no. of wickets taken: ");
			int wktsTaken = sc.nextInt();
			
			System.out.println("Enter no. of matched ducked out: ");
			int outOnZero = sc.nextInt();
			
			System.out.println("Enter the player type (batsman/bowler/wicketKeeper/allRounder): ");
			String type = sc.next();
			
			if(type.equalsIgnoreCase("wicketKeeper")) {
				if(wktKeeper == 1) {
					System.out.println("Limit reached for wicket keeper!");
					continue;
				} else {
					wktKeeper = 1;
				}
			}
			
			double avgScore = totRuns/matchesPlayed;
			
			playerList.add(new Player(id, name, matchesPlayed, totRuns, highestScore, wktsTaken, outOnZero, type, avgScore));
			
			++i;
		}
	}
	
	public boolean checkBowlers() {
		Iterator<Player> itr = playerList.listIterator();
		bowlerCount = 0;
		while(itr.hasNext()) {
			Player p = itr.next();
			if(p.getType().equalsIgnoreCase("bowler"))
				bowlerCount++;
		}
		
		boolean ret = false;
		if(bowlerCount >= 3)
			ret = true;
		return ret;
	}
	
	public ArrayList<Player> teamFormation(int bowlerNum) {
		if(bowlerNum > bowlerCount) {
			System.out.println("Insufficient number of bowlers!");
			return null;
		}
		
		
		return null;
	}
	
	public ArrayList<Player> teamFormation() {
		return null;
	}
	
	public void display(ArrayList<Player> l) {
		for(Player p : l) {
			System.out.println(p.toString());
		}
	}

	public static void main(String[] args) {	
		TeamSelection ts = new TeamSelection();
//		ts.getPlayerList();
		playerList.add(new Player(1, "abc", 6, 420, 85, 2, 0, "batsman", 420/6));
		playerList.add(new Player(2, "zef", 10, 850, 92, 3, 2, "batsman", 850/10));
		playerList.add(new Player(3, "ghi", 6, 400, 76, 8, 1, "bowler", 400/6));
		playerList.add(new Player(4, "jkl", 9, 450, 69, 12, 2, "bowler", 450/9));
		playerList.add(new Player(5, "mno", 15, 650, 76, 15, 3, "bowler", 650/15));
//		playerList.add(new Player(6, "pqr", 6, 420, 85, 2, 0, "batsman", 420/6));
//		playerList.add(new Player(7, "stu", 6, 420, 85, 2, 0, "batsman", 420/6));
		
		if(!ts.checkBowlers())
			System.out.println("No. of bowlers enterd is: " + bowlerCount + ". Minimum number is 3... Please update!");
		
		//sort by avg score
		Collections.sort(playerList);
		for(Player p : playerList) {
			System.out.println(p.toString());
		}
		System.out.println();
		
		//sort by name
		Collections.sort(playerList, new NameComparator());
		for(Player p : playerList) {
			System.out.println(p.toString());
		}
	}
}
